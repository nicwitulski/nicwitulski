#ifndef PRINTABLE_H
#define PRINTABLE_H

#include "SpriteModel.h"
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

///////////////////////////////////////////////////////////////////
/// @class Printable
///
/// Designates an object as printable or not
///////////////////////////////////////////////////////////////////
class PrintableModel
{
private:
   std::string m_alias;
   SpriteModel m_sprite;

public:
   ///////////////////////////////////////////////////////////////////
   /// @fn PrintableModel
   ///////////////////////////////////////////////////////////////////
   PrintableModel();

   virtual ~PrintableModel() {}

   ///////////////////////////////////////////////////////////////////
   /// @fn setDimensions
   ///
   /// @param sprite
   /// @param alias
   /// @param layer
   ///////////////////////////////////////////////////////////////////
   PrintableModel(SpriteModel sprite, std::string alias, int layer);

   ///////////////////////////////////////////////////////////////////
   /// @fn getAlias
   ///////////////////////////////////////////////////////////////////
   std::string getAlias();

   ///////////////////////////////////////////////////////////////////
   /// @fn getSprite
   ///////////////////////////////////////////////////////////////////
   SpriteModel getSprite();

   ///////////////////////////////////////////////////////////////////
   /// @fn setAlias
   ///
   /// @param alias
   ///////////////////////////////////////////////////////////////////
   void setAlias(std::string alias);

   ///////////////////////////////////////////////////////////////////
   /// @fn setSprite
   ///
   /// @param sprite
   ///////////////////////////////////////////////////////////////////
   void setSprite(SpriteModel sprite);

   ///////////////////////////////////////////////////////////////////
   /// @fn doMovement
   ///
   /// @param input
   ///////////////////////////////////////////////////////////////////
   virtual void doMovement(char input);

   ///////////////////////////////////////////////////////////////////
   /// @fn Compare Functions
   ///////////////////////////////////////////////////////////////////
   int Compare(PrintableModel printable) const;

   bool operator==(PrintableModel printable) const { return 0 == Compare(printable); }
   bool operator>(PrintableModel printable) const { return Compare(printable) > 0; }
   bool operator<(PrintableModel printable) const { return Compare(printable) < 0; }
};

#endif
